#define BinCount 32
#define ActiveQue 1
//Active Que determins the amount of "threads" working on the same general dataset


#include "../../GlobalDefines.cginc"
#include "../../MainCompute/CommonStructs.cginc"
int PrimCount;
RWStructuredBuffer<int> DimensionedIndices;

struct AABB {
    float3 BBMax;
    float3 BBMin;
};

struct LightBounds {
    AABB b;
    float3 w;
    float phi;
    float cosTheta_o;
    float cosTheta_e;
    int LightCount;
    float Pad1;
};

RWStructuredBuffer<LightBounds> Nodes;

struct ReadBackData {
    int NodesI;
    int NodeIndex;
    int FirstIndex;
    int IndexCount;
};
struct ObjectSplit {
    int index;
    float cost;
    int dimension;
    LightBounds aabb_left;
    LightBounds aabb_right;
};

RWStructuredBuffer<ReadBackData> ReadBackWrite; 
StructuredBuffer<ReadBackData> ReadBackRead; 

#include "RelevantFunctions.cginc"

//LightTriangles included in commonstructs
globallycoherent RWStructuredBuffer<int> WorkGroup;
#define NextGroupCount 10
/*
WorkGroup


id10 = 


*/

#pragma kernel Transfer


[numthreads(64,1,1)]
void Transfer (uint3 id : SV_DispatchThreadID) {
    if(ReadBackRead[id.x].IndexCount <= 1) return;
    else {
        int WriteIndex = 0;
        InterlockedAdd(WorkingGroup[NextGroupCount], 1, WriteIndex);

        ReadBackWrite[WriteIndex] = 



    }
}



