#include "../GlobalDefines.cginc"

#ifndef DX11
    #pragma use_dxc
    // #pragma enable_d3d11_debug_symbols
#endif
#include "CommonData.cginc"
#include "Materials.cginc"

#ifdef HDRP
    Texture2DArray<float2> MotionVectors;
#else
    Texture2D<float2> MotionVectors;
#endif


#ifdef HardwareRT
    #include "UnityRayQuery.cginc"
    #pragma require inlineraytracing
    RaytracingAccelerationStructure myAccelerationStructure;
#endif
inline bool VisabilityCheck(SmallerRay ray, float dist) {
    #ifdef HardwareRT
        const uint rayFlags = RAY_FLAG_FORCE_OPAQUE  ;
        UnityRayQuery<rayFlags> q;
        RayDesc myRay;
        myRay.Origin = ray.origin;
        myRay.Direction = ray.direction;
        myRay.TMin = 0;
        myRay.TMax = dist;
        while(true) {
            q.TraceRayInline(myAccelerationStructure, rayFlags, 0x1, myRay);
            while(q.Proceed()){}
            
            if(q.CommittedStatus() == COMMITTED_TRIANGLE_HIT) {

                float u = q.CommittedTriangleBarycentrics().y;
                float v = q.CommittedTriangleBarycentrics().x;
                int2 Indexes = int2(q.CommittedInstanceID(), q.CommittedGeometryIndex());
                int triangle_id = q.CommittedPrimitiveIndex();
                #ifdef AdvancedAlphaMapped
                    int mesh_id;

                    int triangleOffset = SubMeshOffsets[MeshOffsets[Indexes.x].x + Indexes.y];
                    triangle_id += triangleOffset;
                    mesh_id = MeshOffsets[Indexes.x].y;

                    int MaterialIndex = (_MeshData[mesh_id].MaterialOffset + AggTris[triangle_id].MatDat);
                    if(GetFlag(_Materials[MaterialIndex].Tag, IsBackground) || GetFlag(_Materials[MaterialIndex].Tag, ShadowCaster)) {myRay.TMin = q.CommittedRayT() + 0.001f; continue;} 
                    if(_Materials[MaterialIndex].MatType == CutoutIndex) {
                        float2 BaseUv = AggTris[triangle_id].tex0 * (1.0f - u - v) + AggTris[triangle_id].texedge1 * u + AggTris[triangle_id].texedge2 * v;
                        float2 Uv = AlignUV(BaseUv, _Materials[MaterialIndex].AlbedoTexScale, _Materials[MaterialIndex].AlbedoTex);
                        if(_AlphaAtlas.SampleLevel(my_point_clamp_sampler, Uv, 0) < _Materials[MaterialIndex].AlphaCutoff) {myRay.TMin = q.CommittedRayT() + 0.001f; continue;}
                    }
                #endif

                return false;
            }
            return true;
        }
    #else
    return VisabilityCheckCompute(ray, dist);
    #endif
}

#pragma kernel ReSTIRGIKernel



bool UseReSTIRGITemporal;
bool UseReSTIRGISpatial;
bool DoReSTIRGIConnectionValidation;
int ReSTIRGISpatialCount;
int ReSTIRGITemporalMCap;
float GISpatialRadius;
RWTexture2D<half2> GradientWrite;

inline float2 vogelDiskSample(int i, int num_samples, float r_offset, float phi_offset) {
    float r = sqrt((float(i) + 0.07f + r_offset*0.93f) / float(num_samples));
    float phi = float(i) * 2.399963229728f + 2.0f * PI * phi_offset;
    float sinc;
    sincos(phi, sinc, phi);
    return r * float2(sinc,phi);
}

inline float ggx_distribution(float n_dot_h, float roughness) {
    float a2 = roughness * roughness;
    float d = (n_dot_h * a2 - n_dot_h) * n_dot_h + 1.0;

    return a2 / (PI * d * d);
}


inline void UpdateReservoir(inout float4 CurRes, inout float wsum, float4 PrevRes, float rndnum, inout int2 CachedID, int2 ID) {
    float w = max(PrevRes.x * PrevRes.y * PrevRes.w, 0);
    wsum += w;
    [branch]if (rndnum < (w / wsum)) {
        CachedID = ID;
        CurRes.w = PrevRes.w;
        // CurRes.z = PrevRes.z;
    }
}
inline bool UpdateReservoir2(inout float4 CurRes, inout float wsum, float4 PrevRes, float rndnum, inout int2 CachedID, int2 ID) {
    float w = max(PrevRes.x * PrevRes.y * PrevRes.w, 0);
    wsum += w;
    [branch]if (rndnum < (w / wsum)) {
        CachedID = ID;
        CurRes.w = PrevRes.w;
        return true;
        // CurRes.z = PrevRes.z;
    }
    return false;
}

inline float get_gradient(float l_curr, float l_prev)
{
    float l_max = max(l_curr, l_prev);

    if (l_max == 0)
        return 0;

    float ret = abs(l_curr - l_prev) / l_max;
    // ret = min(ret, 0.4f);
    ret *= ret; // make small changes less significant

    return ret;
}

#define KernelSize 16
 int RandOffset;   
[numthreads(KernelSize, KernelSize, 1)]
void ReSTIRGIKernel(uint3 id : SV_DispatchThreadID, uint3 id2 : SV_GroupThreadID, uint3 id3 : SV_GroupID, uint id4 : SV_GroupIndex) {
    if(id.x > screen_width || id.y > screen_height) return;
    const int pixel_index = id.x + id.y * screen_width;

    const float2 UV = id.xy / float2(screen_width, screen_height);
    const SmallerRay CameraRay = CreateCameraRay(id.xy / float2(screen_width, screen_height) * 2.0f - 1.0f);
    
    const float4 GBuffer = ScreenSpaceInfoRead[id.xy];
    const int MatIndex = (asuint(GBuffer.w) << 3) >> 3;
    const uint Case = (asuint(GBuffer.w) << 1) >> 30;
    const float3 GeomNorm = i_octahedral_32(asuint(GBuffer.x));
    const float3 SurfNorm = i_octahedral_32(asuint(GBuffer.y));
    float3 PrimaryHitPosition = LoadSurfaceInfo(id.xy);
    const float3 DirectionalPosition = GBuffer.z * CameraRay.direction + CameraRay.origin;

    ColData CenterCol = GlobalColors[pixel_index];
    float3 Data = CenterCol.Data;
    CenterCol.throughput.x = pixel_index;
    CenterCol.throughput.y = frames_accumulated;
    uint4 WorldPos = WorldPosC[id.xy];
    float4 NEEPos = NEEPosA[id.xy];
    MaterialData SurfaceMat = _Materials[MatIndex];
    uint Flag = CenterCol.Flags;
    SurfaceMat.surfaceColor = max(unpackRGBE(Flag), 0.005f);
    uint MetRoughIsSpec = CenterCol.MetRoughIsSpec;
    SurfaceMat.roughness = FromColorSpecPacked(MetRoughIsSpec).y;
    SurfaceMat.metallic = FromColorSpecPacked(MetRoughIsSpec).x;
    CenterCol.throughput.z = asfloat(GBuffer.y);

    #ifdef HDRP
        float2 MotionVector = MotionVectors.SampleLevel(my_linear_clamp_sampler, float3(UV,0), 0).xy;
    #else
         float2 MotionVector = MotionVectors.SampleLevel(my_linear_clamp_sampler, UV, 0).xy;
    #endif
    int2 prevIndex = int2(floor(((float2(id.xy) + 0.5) * float2(rcp(screen_width), rcp(screen_height)) - MotionVector) * float2(screen_width, screen_height)));
    float4 PrevRes = ReservoirB[prevIndex];
    float4 PrevGBuffer = PrevScreenSpaceInfo[prevIndex];
    const bool RetracedSample = ReSTIRGIUpdateRate != 0 && RandomNums[id.xy].z != 0;
    int2 CachedID = -1;
    GradientWrite[ceil(id.xy / 3)] = 0;
    float4 CurrentRes = 1;
    float3 bsdf, NEEbsdf;
    float pdf, NEEpdf;
    CenterCol.PrimaryNEERay *= EvaluateBsdf(SurfaceMat, CameraRay.direction, normalize(NEEPos.xyz - PrimaryHitPosition), SurfNorm, NEEpdf, NEEbsdf, pixel_index);
    bool Valid2 = ReconstructBsdf(SurfaceMat, CameraRay.direction, normalize(CalcPos(WorldPos) - PrimaryHitPosition), SurfNorm, pdf, bsdf, GetTangentSpace(SurfNorm), pixel_index, Case);
    float Lum = (luminance((CenterCol.Direct + CenterCol.Indirect) * bsdf) + luminance(pow(unpackRGBE(CenterCol.PrimaryNEERay),2.2f) * NEEbsdf));
    if(CurrentRes.x == 1) CurrentRes = float4(1,1,Case,clamp(Lum, 0, 3000));
    float wsum = CurrentRes.w;
    ColData PrevCol = PrevGlobalColorsA[prevIndex.x + prevIndex.y * screen_width];
    if(RetracedSample) {
        float3 LumA = (CenterCol.Direct + pow(unpackRGBE(CenterCol.PrimaryNEERay),2.2f));
        float3 LumB = (PrevCol.Direct + pow(unpackRGBE(PrevCol.PrimaryNEERay),2.2f));
        float LumA2 = luminance(LumA);
        float LumB2 = luminance(LumB);
        #ifdef IndirectRetraceWeighting
            LumA += CenterCol.Indirect;
            LumB += PrevCol.Indirect;
        #endif

        CenterCol.throughput = PrevCol.throughput;
        if(abs(luminance(LumA) - luminance(LumB)) > 0.1f * max(luminance(LumA), luminance(LumB))) {
            if(LumB2 != 0 || LumA2 != 0) GradientWrite[ceil(id.xy / 3)] = get_gradient(LumA2, LumB2) / 2.0f;// clamp(pow(abs(LumA2 - LumB2) / (4.0f + max(LumB2, LumA2)),1.0f),0,1);
                // CurrentRes.y = 0;
                // wsum = 0;
                CurrentRes.x += PrevRes.x;
                wsum = CurrentRes.x * CurrentRes.w * PrevRes.y;
                CurrentRes.y = wsum / max(CurrentRes.x * CurrentRes.w, 0.0000001f);
        } else {
            float3 geo_normal_prev = i_octahedral_32(asuint(PrevGBuffer.x));//needs to be TEX_PT_GEO_NORMAL_B, but since for now I am not worrying about normal maps yet, it can use the same texture
            
            float dist_depth = (abs(GBuffer.z - PrevGBuffer.z) - length(CamDelta)) / min(abs(GBuffer.z), abs(PrevGBuffer.z));
            float dot_geo_normals = dot(GeomNorm, geo_normal_prev);

            if ((dist_depth < 0.1f && dot_geo_normals > 0.7)) {
                CurrentRes.x = PrevRes.x;
                wsum = CurrentRes.x * CurrentRes.w * PrevRes.y;
                CurrentRes.y = wsum / max(CurrentRes.x * CurrentRes.w, 0.0000001f);
            } else  CurrentRes.y = 0;
        }
    }



    // {
    //     ColData TempCol = PrevCol;
    //     float LastLum = luminance((TempCol.Direct + TempCol.Indirect) + pow(unpackRGBE(TempCol.PrimaryNEERay),2.2f));
    //     float ThisLum = luminance((CenterCol.Direct + CenterCol.Indirect + pow(unpackRGBE(CenterCol.PrimaryNEERay),2.2f)));
    //     if((ThisLum) / (LastLum + 1) > 25.5f * (random(64, pixel_index).x * 0.5f + 0.5f)) CurrentRes.w = 0;
    // }

    bool IsTemporalValid = all(prevIndex > 0 && prevIndex < int2(screen_width - 0, screen_height - 0));
    if(UseReSTIRGITemporal && (!RetracedSample)) {
        float dist_depth = (abs(GBuffer.z - PrevGBuffer.z)) / abs(GBuffer.z);
        float dot_geo_normals = dot(GeomNorm, i_octahedral_32(asuint(PrevGBuffer.x)));
        SmallerRay NeighborRay = CreateCameraRayPrev(prevIndex / float2(screen_width, screen_height) * 2.0f - 1.0f);
        float3 ray = (PrevGBuffer.z * NeighborRay.direction + NeighborRay.origin) - DirectionalPosition; 
        if ((abs(dot(GeomNorm, ray)) < 0.1f && dot_geo_normals > 0.7) && Case != 3 && IsTemporalValid) {
            // if(PrevRes.z != 0 || ggx_distribution(dot(normalize(-normalize(CalcPos(WorldPosB[prevIndex]) - PrimaryHitPosition) + CameraRay.direction), SurfNorm), clamp(SurfaceMat.roughness, 0.089 * 0.089, 1.0)) > 0.1f * randomNEE(126, pixel_index).y) {
                UpdateReservoir(CurrentRes, wsum, PrevRes, randomNEE(126, pixel_index).x, CachedID, prevIndex);
                CurrentRes.x += PrevRes.x;
            // }
        }
        CurrentRes.y = wsum / max(CurrentRes.x * CurrentRes.w, 0.0000001f);
    }


    if(CachedID.x >= 0) {
        uint4 TempWorldPos = WorldPosB[CachedID];
        bool Valid4 = ReconstructBsdf(SurfaceMat, CameraRay.direction, normalize(CalcPos(TempWorldPos) - PrimaryHitPosition), SurfNorm, pdf, bsdf, GetTangentSpace(SurfNorm), pixel_index, PrevRes.z);
        if(Valid4) {
            CenterCol = PrevCol;
            NEEPos = NEEPosB[CachedID];
            WorldPos = TempWorldPos;
            CenterCol.PrimaryNEERay *= EvaluateBsdf(SurfaceMat, CameraRay.direction, normalize(NEEPos.xyz - PrimaryHitPosition), SurfNorm, NEEpdf, NEEbsdf, pixel_index);
            float Lum = luminance((CenterCol.Direct + CenterCol.Indirect) * bsdf) + luminance(pow(unpackRGBE(CenterCol.PrimaryNEERay),2.2f) * NEEbsdf);
            CurrentRes.w = clamp(Lum,0,3000);
            CurrentRes.z = PrevRes.z;
           // CurrentRes.y = wsum / max(CurrentRes.x * CurrentRes.w, 0.0000001f);
        }
    }
    if(CurrentRes.y > 10) CurrentRes.y = 0;
    CurrentRes.x = clamp(CurrentRes.x,0,ReSTIRGITemporalMCap);
    WorldPosA[id.xy] = WorldPos;
    NEEPosA[id.xy] = NEEPos;
    ReservoirA[id.xy] = CurrentRes;
    CenterCol.Data = Data;
    CenterCol.MetRoughIsSpec = MetRoughIsSpec;
    CenterCol.Flags = Flag;
    PrevGlobalColorsB[pixel_index] = CenterCol;
}


#pragma kernel ReSTIRGISpatial

[numthreads(KernelSize, KernelSize, 1)]
void ReSTIRGISpatial(uint3 id : SV_DispatchThreadID) {
 if(id.x > screen_width || id.y > screen_height) return;
    const int pixel_index = id.x + id.y * screen_width;

    const float4 GBuffer = ScreenSpaceInfoRead[id.xy];
    const int MatIndex = (asuint(GBuffer.w) << 3) >> 3;
    const float3 GeomNorm = i_octahedral_32(asuint(GBuffer.x));
    const float3 SurfNorm = i_octahedral_32(asuint(GBuffer.y));
    float3 PrimaryHitPosition = LoadSurfaceInfo(id.xy);
    const SmallerRay CameraRay = CreateCameraRay(id.xy / float2(screen_width, screen_height) * 2.0f - 1.0f);
    const float3 DirectionalPosition = GBuffer.z * CameraRay.direction;
    ColData CenterCol = PrevGlobalColorsA[pixel_index];
    const float3 Data = CenterCol.Data;
    uint MetRoughIsSpec = CenterCol.MetRoughIsSpec;
    MaterialData SurfaceMat = _Materials[MatIndex];
    const uint Flag = CenterCol.Flags;
    SurfaceMat.surfaceColor = max(unpackRGBE(Flag), 0.005f);
    SurfaceMat.roughness = FromColorSpecPacked(MetRoughIsSpec).y;
    SurfaceMat.metallic = FromColorSpecPacked(MetRoughIsSpec).x;


    float4 PrevRes;
    float4 PrevGBuffer;
    float4 CurrentRes = ReservoirB[id.xy];
    float wsum = max(CurrentRes.x * CurrentRes.y * CurrentRes.w, 0);
    int2 CachedID = -1;
    const uint Case = CurrentRes.z;
    float3 MainPos = CameraRay.origin + CameraRay.direction * GBuffer.z;
    float4 WorldPosA2 = WorldPosB[id.xy];
    if (UseReSTIRGISpatial && Case != 3) {
        int2 NeighborIndex;
        float2 RandOffsets;
        float2 RandOffsets2;
        float TempSpatialRadius = GISpatialRadius;
        for (int i = 0; i < ReSTIRGISpatialCount; i++) {
            RandOffsets = randomNEE(i + 127 * RandOffset + 12, pixel_index);
            NeighborIndex = id.xy + vogelDiskSample(i, ReSTIRGISpatialCount, RandOffsets.y, 2.0f * PI * RandOffsets.x) * TempSpatialRadius;

            if(NeighborIndex.x < 0) NeighborIndex.x = -NeighborIndex.x;
            if(NeighborIndex.y < 0) NeighborIndex.y = -NeighborIndex.y;
            if(NeighborIndex.x >= screen_width) NeighborIndex.x = 2 * screen_width - NeighborIndex.x - 1;
            if(NeighborIndex.y >= screen_height) NeighborIndex.y = 2 * screen_height - NeighborIndex.y - 1;

            PrevGBuffer = ScreenSpaceInfoRead[NeighborIndex];

            if(dot(i_octahedral_32(asuint(PrevGBuffer.y)), SurfNorm) < 0.99f || (abs(GBuffer.z - PrevGBuffer.z)) / abs(GBuffer.z) >= 0.1f) {
                // if(TempSpatialRadius > GISpatialRadius / 8) TempSpatialRadius *= 0.75f; 
                continue;
            }

            PrevRes = ReservoirB[NeighborIndex];
            SmallerRay NeighborRay = CreateCameraRay(NeighborIndex / float2(screen_width, screen_height) * 2.0f - 1.0f);
            float3 ray = (PrevGBuffer.z * NeighborRay.direction) - DirectionalPosition;
            float3 NeighborPos = NeighborRay.origin + NeighborRay.direction * PrevGBuffer.z;
            float Similarity = 0;
            if((CurrentRes.z == 0)) {
                float3 ray2 = CalcPos(WorldPosB[NeighborIndex]) - CalcPos(WorldPosA2);
                float3 norm2 = normalize((normalize(CalcPos(WorldPosB[NeighborIndex]) - MainPos) + normalize(CalcPos(WorldPosA2) - MainPos)) / 2.0f);
                float3 MainDir = normalize(CalcPos(WorldPosA2) - MainPos);
                Similarity = lerp(log2(abs(dot(norm2, ray2)) + 1), 0, SurfaceMat.roughness);
            }
            if (Similarity < 0.1f && abs(dot(GeomNorm, ray)) < 0.1f && PrevRes.z == CurrentRes.z && MatIndex ==  (asuint(PrevGBuffer.w) << 3) >> 3) {
                RandOffsets2 = randomNEE(i + 160 * RandOffset + 12, pixel_index);
                if(UpdateReservoir2(CurrentRes, wsum, PrevRes, RandOffsets2.y, CachedID, NeighborIndex)) {
                    WorldPosA2 = WorldPosB[NeighborIndex];
                }
                CurrentRes.x += PrevRes.x;
            };
        }
        CurrentRes.y = wsum / max(CurrentRes.x * CurrentRes.w, 0.0000001f);

    }

    float3 bsdf, NEEbsdf;
    float pdf, NEEpdf;
    uint4 WorldPos;// = WorldPosB[id.xy];
    float4 NEEPos;// = NEEPosB[id.xy];
    if(CachedID.x >= 0) {
        CenterCol = PrevGlobalColorsA[CachedID.x + CachedID.y * screen_width];
        WorldPos = WorldPosB[CachedID];
        NEEPos =  NEEPosB[CachedID];
        bool Valid4 = ReconstructBsdf(SurfaceMat, CameraRay.direction, normalize(CalcPos(WorldPos) - PrimaryHitPosition), SurfNorm, pdf, bsdf, GetTangentSpace(SurfNorm), pixel_index, ReservoirB[CachedID].z);
        CenterCol.PrimaryNEERay *= EvaluateBsdf(SurfaceMat, CameraRay.direction, normalize(NEEPos.xyz - PrimaryHitPosition), SurfNorm, NEEpdf, NEEbsdf, pixel_index);
    } else {
        WorldPos = WorldPosB[id.xy];
        NEEPos = NEEPosB[id.xy];
        CenterCol.PrimaryNEERay *= EvaluateBsdf(SurfaceMat, CameraRay.direction, normalize(NEEPos.xyz - PrimaryHitPosition), SurfNorm, NEEpdf, NEEbsdf, pixel_index);
        bool Valid4 = ReconstructBsdf(SurfaceMat, CameraRay.direction, normalize(CalcPos(WorldPos) - PrimaryHitPosition), SurfNorm, pdf, bsdf, GetTangentSpace(SurfNorm), pixel_index, CurrentRes.z);
    }


    if(CurrentRes.y > 10) CurrentRes.y = 0;

        [branch]if (DoReSTIRGIConnectionValidation && Case != 3 && !((asuint(GBuffer.w) >> 31) & 0x1)) {
            PrimaryHitPosition += GeomNorm * NormalOffset;
            float Distance = length(PrimaryHitPosition - CalcPos(WorldPos)) - 0.025f;
            SmallerRay ray = CreateRay(PrimaryHitPosition, normalize(CalcPos(WorldPos) - PrimaryHitPosition));

            bool ConnectedlyVisable = dot(ray.direction, GeomNorm) > 0.0f;
            if(ConnectedlyVisable && luminance(CenterCol.Direct + CenterCol.Indirect) != 0) ConnectedlyVisable = VisabilityCheck(ray, Distance);
            if (!ConnectedlyVisable) {CenterCol.Direct = 0; CenterCol.Indirect = 0;}
            #ifdef ExtraSampleValidation
                if (CenterCol.PrimaryNEERay != 0) {
                    Distance = length(PrimaryHitPosition - NEEPos.xyz) - 0.025f;
                    ray = CreateRay(PrimaryHitPosition, normalize(NEEPos.xyz - PrimaryHitPosition));
                    ConnectedlyVisable = dot(ray.direction, GeomNorm) > 0.0f;
                    if(ConnectedlyVisable) ConnectedlyVisable = VisabilityCheck(ray, Distance);
                    if (!ConnectedlyVisable) {
                        CenterCol.PrimaryNEERay = 0;
                    }
                }
            #endif
        }
        if(GetBounceData(MetRoughIsSpec) != 1) {
            MetRoughIsSpec = (MetRoughIsSpec & ~(0xFC000000)) |  ((2) << 26);  
            GlobalColors[pixel_index].Data = float3(max(bsdf, 0.0001f));
        }
        GlobalColors[pixel_index].throughput = float3(asfloat(uint2(octahedral_32(GeomNorm), octahedral_32(SurfNorm))), GBuffer.z);
        GlobalColors[pixel_index].Direct = CenterCol.Direct * CurrentRes.y;
        GlobalColors[pixel_index].Indirect = CenterCol.Indirect * CurrentRes.y;
        GlobalColors[pixel_index].PrimaryNEERay = packRGBE(pow(pow(unpackRGBE(CenterCol.PrimaryNEERay),2.2f) * CurrentRes.y * NEEbsdf,rcp(2.2f)));
        GlobalColors[pixel_index].MetRoughIsSpec = MetRoughIsSpec;//ToColorSpecPacked(float3(saturate((SurfaceMat.metallic + SurfaceMat.clearcoat + SurfaceMat.Specular)), FromColorSpecPacked(MetRoughIsSpec).yz));
        GlobalColors[pixel_index].Flags = Flag;
        WorldPosC[id.xy] = WorldPos;
}