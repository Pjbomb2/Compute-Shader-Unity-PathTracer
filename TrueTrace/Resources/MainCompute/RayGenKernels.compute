#include "../GlobalDefines.cginc"
#ifndef DX11
    #pragma use_dxc
#endif
#include "CommonData.cginc"

#ifdef HDRP
Texture2DArray<float2> MotionVectors;
Texture2DArray<float3> NormalTex;
Texture2DArray<float> Depth;
#else
Texture2D<float2> MotionVectors;
Texture2D<float3> NormalTex;
Texture2D<float> Depth;
#endif

#pragma kernel GenerateASVGF 

static const ColData InitCol = { 1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0};
const static RayHit tempray = CreateRayHit();

[numthreads(16, 16, 1)]
void GenerateASVGF(uint3 id : SV_DispatchThreadID) {

    if (id.x >= screen_width || id.y >= screen_height) return;
    const uint pixel_index = id.y * screen_width + id.x;
    RayData globray = {Rays[pixel_index].origin + NearPlane * Rays[pixel_index].direction, pixel_index, Rays[pixel_index].direction, 0, 0,0,asuint(FarPlane),0};
    GlobalRays[pixel_index] = globray;
}

#pragma kernel Generate
[numthreads(16, 16, 1)]
void Generate(uint3 id : SV_DispatchThreadID) {

    if (id.x >= screen_width || id.y >= screen_height) return;
    const uint pixel_index = id.y * screen_width + id.x;
    float2 jitter = ((random(0, pixel_index) - 0.5));
    if(OIDNGuideWrite) jitter = 0;
    float2 uv = float2((id.xy + jitter) / float2(screen_width, screen_height) * 2.0f - 1.0f);
    SmallerRay ray = CreateCameraRay(uv, pixel_index);
    RayData globray = {ray.origin + NearPlane * ray.direction, pixel_index, ray.direction, 0, 0,0,asuint(FarPlane),0};
    GlobalRays[pixel_index] = globray;
}

bool DoPanorama;
float2 Segment;
#pragma kernel GeneratePanorama
[numthreads(16, 16, 1)]
void GeneratePanorama(uint3 id : SV_DispatchThreadID) {
    if (id.x >= screen_width || id.y >= screen_height) return;
    const uint pixel_index = id.y * screen_width + id.x;
    float2 jitter = ((random(0, pixel_index) - 0.5));
    if(OIDNGuideWrite) jitter = 0;
    float2 uv = float2((id.xy + jitter) / float2(screen_width, screen_height));
    SmallerRay ray;
    if(DoPanorama) {
        uv.y = 1.0f - uv.y;
        uv.x = (uv.x * (Segment.y - Segment.x)) + Segment.x;
        uv.x = 1.0f - uv.x;

        ray = CreateRay(mul(CamToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz + NearPlane * normalize(equirectUvToDirection(uv)), normalize(equirectUvToDirection(uv)));
        _DebugTex[id.xy] = float4(uv, 0, 1);
    } else {
        uv.x = ((uv.x * (Segment.y - Segment.x)) + Segment.x);
        uv = (uv * 2.0f) - 1.0f;

        ray = CreateCameraRay(uv, pixel_index);
        ray.origin = ray.origin + NearPlane * ray.direction;
    }
    RayData globray = {ray.origin, pixel_index, ray.direction, 0, 0,0,asuint(FarPlane),0};
    GlobalRays[pixel_index] = globray;
}



    groupshared bool ActiveData[256];
    groupshared uint TotalCount[8];
    #pragma kernel CacheResolve
    [numthreads(256, 1, 1)]
    void CacheResolve(uint3 id : SV_DispatchThreadID, uint3 GT : SV_GroupThreadID) {
    #ifdef RadianceCache
        HashEntriesBuffer[id.x].z = 0;
        uint2 HashValue = HashEntriesBuffer[id.x];
        bool Valid = !(id.x > CacheCapacity || (HashValue.x == 0 && HashValue.y == 0));
        int GroupIndex = floor(GT.x / (float)BucketCount);
        ActiveData[GT.x] = Valid;
        TotalCount[GroupIndex] = 0;
        GroupMemoryBarrierWithGroupSync();
        uint4 SummedVoxel = 0;
        [branch]if(ActiveData[GT.x]) {
            uint4 VoxelCurr = VoxelDataBufferA.Load4(id.x * 16);
            uint4 VoxelPrev = VoxelDataBufferB.Load4(id.x * 16);
            uint FrameCounter = (VoxelPrev.w >> 20) & ((1u << 12) - 1);
            SummedVoxel = VoxelCurr + VoxelPrev;
            uint VoxelSampleCount = SummedVoxel.w & ((1u << 20) - 1);

            if ((VoxelSampleCount < MaxSampleCount) && any(CamPos - PrevCamPos) && (VoxelCurr.w != 0)) {
                uint2 SidelinedHashKey = GetReprojectedHash(HashValue);

                uint cacheEntry = 0xFFFFFFFF;
                if (HashGridFind(SidelinedHashKey, cacheEntry)) {
                    uint4 SidelinedVoxelPrev = VoxelDataBufferB.Load4(cacheEntry * 16);
                    uint SidelinedVoxelSampleCount = SidelinedVoxelPrev.w & ((1u << 20) - 1);
                    if (SidelinedVoxelSampleCount > 0) {
                        SummedVoxel.xyz += SidelinedVoxelPrev.xyz;
                        VoxelSampleCount += SidelinedVoxelSampleCount;
                    }
                }
            }

            if (VoxelSampleCount > MaxSampleCount) {
                SummedVoxel.xyz *= (float)MaxSampleCount / VoxelSampleCount;
                VoxelSampleCount = MaxSampleCount;
            }

            SummedVoxel.w = VoxelSampleCount;

            if ((VoxelCurr.w & ((1u << 20) - 1)) == 0) {
                ++FrameCounter;
                SummedVoxel.w |= ((FrameCounter & ((1u << 12) - 1)) << 20);
            }

            if (FrameCounter > MaxSampleCount)
                SummedVoxel = 0;

            if(SummedVoxel.w == 0) ActiveData[GT.x] = false;
            else InterlockedAdd(TotalCount[GroupIndex], 1);
        }

        GroupMemoryBarrierWithGroupSync();
        if(!Valid) return;

        if(id.x % BucketCount >= TotalCount[GroupIndex]) {
            VoxelDataBufferA.Store4(id.x * 16, 0);
                
            uint Offset = 0;
            if(ActiveData[GT.x]) {
                uint Prefix = 0;
                for(int i = GroupIndex * BucketCount + TotalCount[GroupIndex] + 1; i < (GroupIndex + 1) * BucketCount; i++)
                    if(ActiveData[i]) Prefix++;

                uint Empty = 0;
                while(Empty < TotalCount[GroupIndex]) {
                    if(!ActiveData[Offset + GroupIndex * BucketCount]) {
                        if (Empty == Prefix) {
                            Offset += (id.x / BucketCount) * BucketCount;
                            VoxelDataBufferA.Store4(Offset * 16, SummedVoxel);
                            break;
                        }
                        Empty++;
                    }
                    Offset++;
                }
            }
            HashEntriesBuffer[id.x].z = Offset ? Offset : 0xFFFFFFFF;
        } else if(ActiveData[GT.x]) {
            VoxelDataBufferA.Store4(id.x * 16, SummedVoxel);
        } else {
            VoxelDataBufferA.Store4(id.x * 16, 0);
            
        }
    #endif
    }


    #pragma kernel ScreenCopy
    [numthreads(256, 1, 1)]
    void ScreenCopy(uint3 id : SV_DispatchThreadID) {
    #ifdef RadianceCache
        uint copyOffset = HashEntriesBuffer[id.x].z;
        if (!(copyOffset == 0 || id.x >= CacheCapacity)) {
            if (copyOffset == 0xFFFFFFFF) HashEntriesBuffer[id.x] = (HashKeyValue)0;
            else if(copyOffset != 0) {
                HashKeyValue HashValue = uint3(HashEntriesBuffer[id.x].xy,0);
                HashEntriesBuffer[id.x] = (HashKeyValue)0;
                HashEntriesBuffer[copyOffset] = HashValue;
            }
            HashEntriesBuffer[id.x].z = 0;
        }
        HashEntriesBufferA2[id.x] = HashEntriesBuffer[id.x];
    #endif
    }


    #pragma kernel ScreenClear
    [numthreads(256, 1, 1)]
    void ScreenClear(uint3 id : SV_DispatchThreadID) {
    #ifdef RadianceCache
        VoxelDataBufferA.Store4(id.x * 16, 0);
    #endif
    }