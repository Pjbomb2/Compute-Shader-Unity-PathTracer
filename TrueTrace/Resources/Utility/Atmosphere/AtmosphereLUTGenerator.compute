// Each #kernel tells which function to compile; you can have many kernels
// #pragma use_dxc

#define TransmittanceTexWidth 256
#define TransmittanceTexHeight 64

#define ScatteringTexRSize 32
#define ScatteringTexMUSize 128
#define ScatteringTexMUSSize 32
#define ScatteringTexNUSize 8

#define IrradianceTexWidth 64
#define IrradianceTexHeight 16

static const uint ScatteringTexWidth = ScatteringTexNUSize * ScatteringTexMUSSize;
static const uint ScatteringTexHeight = ScatteringTexMUSize;
static const uint ScatteringTexDepth = ScatteringTexRSize;


#define MultiScatteringLUTRes 32

#define PI 3.14159265f

RWTexture2D<float4> TransmittanceTex;
RWTexture3D<float4> RayleighTex;
RWTexture3D<float4> MieTex;
RWTexture2D<float4> MultiScatTex;

Texture3D<float4> RayleighTexRead;
Texture3D<float4> MieTexRead;

Texture2D<float4> TransmittanceTexRead;

SamplerState linearClampSampler;

RWTexture2D<float4> DeltaIrradianceTex;
RWTexture2D<float4> IrradianceTex;

Texture2D<float4> IrradianceTexRead;

RWTexture3D<float4> ScatteringTex;
RWTexture3D<float4> ScatteringDensityTex;

Texture3D<float4> ScatteringDensityTexRead;

RWTexture3D<float4> MultipleScatteringTex;
Texture3D<float4> MultipleScatteringTexRead;





#pragma kernel Transmittance_Kernel

float top_radius;
float bottom_radius;
struct DensityProfileLayer {
	float width;
	float exp_term;
	float exp_scale;
	float linear_term;
	float constant_term;
};
StructuredBuffer<DensityProfileLayer> rayleigh_density;
StructuredBuffer<DensityProfileLayer> mie_density;
StructuredBuffer<DensityProfileLayer> absorption_density;



float3 solar_irradiance;
float sun_angular_radius;
float3 rayleigh_scattering;
float3 mie_scattering;
float3 mie_extinction;
float mie_phase_function_g;
float3 absorption_extinction;
float3 ground_albedo;
float mu_s_min;

bool RayIntersectsGround(float r, float mu) {
	return (mu < 0.0f && r * r * (mu * mu - 1.0f) + bottom_radius * bottom_radius >= 0.0f);
}

float ClampCosine(float mu) {
	return clamp(mu, -1.0f, 1.0f);
}

float ClampRadius(float r) {
	return clamp(r, bottom_radius, top_radius);
}

float DistanceToTopAtmosphereBoundary(float r, float mu) {
	if (mu < -1 || mu > 1 || r > top_radius) return 0;
	float discriminant = r * r * (mu * mu - 1.0f) + top_radius * top_radius;
	return max(-r * mu + sqrt(max(discriminant, 0.0f)), 0.0f);
}

float DistanceToBottomAtmosphereBoundary(float r, float mu) {
	if (mu < -1 || mu > 1 || r > top_radius) return 0;
	float discriminant = r * r * (mu * mu - 1.0f) + bottom_radius * bottom_radius;
	return max(-r * mu - sqrt(max(discriminant, 0.0f)), 0.0f);
}

float GetLayerDensity(DensityProfileLayer layer, float altitude) {
	float density = layer.exp_term * exp(layer.exp_scale * altitude) + layer.linear_term * altitude + layer.constant_term;
	return clamp(density, 0.0f, 1.0f);
}

float GetProfileDensity(DensityProfileLayer DensProf[2], float altitude) {
	return (altitude < DensProf[0].width) ? GetLayerDensity(DensProf[0], altitude) : GetLayerDensity(DensProf[1], altitude);
}

float ComputeOpticalfloatToTopAtmosphereBoundary(DensityProfileLayer DensProf1, DensityProfileLayer DensProf2, float r, float mu) {
	DensityProfileLayer DensProf[2] = { DensProf1, DensProf2 };
	const int SAMPLE_COUNT = 500;
	float dx = DistanceToTopAtmosphereBoundary(r, mu) / (float)SAMPLE_COUNT;
	float result = 0.0f;
	for (int i = 0; i <= SAMPLE_COUNT; ++i) {
		float d_i = (float)i * dx;
		float r_i = sqrt(d_i * d_i + 2.0f * r * mu * d_i + r * r);

		float y_i = GetProfileDensity(DensProf, r_i - bottom_radius);

		float weight_i = i == 0 || i == SAMPLE_COUNT ? 0.5f : 1.0f;

		result += y_i * weight_i * dx;
	}
	return result;
}

float3 ComputeTransmittanceToTopAtmosphereBoundary(float r, float mu) {

	return exp(-(
		rayleigh_scattering *
		ComputeOpticalfloatToTopAtmosphereBoundary(rayleigh_density[0], rayleigh_density[1], r, mu) +
		mie_extinction *
		ComputeOpticalfloatToTopAtmosphereBoundary(mie_density[0], mie_density[1], r, mu) +
		absorption_extinction *
		ComputeOpticalfloatToTopAtmosphereBoundary(absorption_density[0], absorption_density[1], r, mu)
		));
}

float GetTextureCoordFromUnitRange(float x, int texture_size) {
	return 0.5f / (float)texture_size + x * (1.0f - 1.0f / (float)texture_size);
}

float GetUnitRangeFromTextureCoord(float u, int texture_size) {
	return (u - 0.5f / (float)texture_size) / (1.0f - 1.0f / (float)texture_size);
}
static const float H = sqrt(top_radius * top_radius - bottom_radius * bottom_radius);
float2 GetTransmittanceTextureUvFromRMu(float r, float mu) {

	float rho = sqrt(max(r * r - bottom_radius * bottom_radius, 0.0f));

	float d = DistanceToTopAtmosphereBoundary(r, mu);
	float d_min = top_radius - r;
	float d_max = rho + H;
	float x_mu = (d - d_min) / (d_max - d_min);
	float x_r = rho / H;
	return float2(GetTextureCoordFromUnitRange(x_mu, TransmittanceTexWidth), GetTextureCoordFromUnitRange(x_r, TransmittanceTexHeight));
}

void GetRMuFromTransmittanceTextureUv(float2 uv, inout float r, inout float mu) {
	float x_mu = GetUnitRangeFromTextureCoord(uv.x, TransmittanceTexWidth);
	float x_r = GetUnitRangeFromTextureCoord(uv.y, TransmittanceTexHeight);

	float rho = H * x_r;

	r = sqrt(rho * rho + bottom_radius * bottom_radius);

	float d_min = top_radius - r;
	float d_max = rho + H;
	float d = d_min + x_mu * (d_max - d_min);
	mu = (d == 0.0f) ? 1.0f : ((H * H - rho * rho - d * d) / (2.0f * r * d));
	mu = clamp(mu, -1.0f, 1.0f);

}

float3 ComputeTransmittanceToTopAtmosphereBoundaryTexture(uint2 id) {
	float r;
	float mu;
	GetRMuFromTransmittanceTextureUv(id.xy / float2(TransmittanceTexWidth, TransmittanceTexHeight), r, mu);
	return ComputeTransmittanceToTopAtmosphereBoundary(r, mu);
}

SamplerState _LinearClamp;

inline float4 TEX2D(Texture2D<float4> tex, float2 uv)
{
	return tex.SampleLevel(_LinearClamp, uv, 0);
}

float3 GetTransmittanceToTopAtmosphereBoundary(float r, float mu) {
	float2 uv = GetTransmittanceTextureUvFromRMu(r, mu);
	return TEX2D(TransmittanceTexRead, uv).rgb;
}

float3 GetTransmittance(float r, float mu, float d, bool ray_r_mu_intersects_ground) {

	float r_d = clamp(sqrt(d * d + 2.0f * r * mu * d + r * r), bottom_radius, top_radius);
	float mu_d = clamp((r * mu + d) / r_d, -1.0f, 1.0f);
	if (ray_r_mu_intersects_ground) {
		return min((GetTransmittanceToTopAtmosphereBoundary(r_d, -mu_d) /
			GetTransmittanceToTopAtmosphereBoundary(r, -mu)),
			float3(1.0f, 1.0f, 1.0f));

	}
	else {
		return min((GetTransmittanceToTopAtmosphereBoundary(r, mu) /
			GetTransmittanceToTopAtmosphereBoundary(r_d, mu_d)),
			float3(1.0f, 1.0f, 1.0f));
	}
}



float3 GetTransmissionToSun(float r, float mu_s) {
	float sin_theta_h = bottom_radius / r;
	float cos_theta_h = -sqrt(max(1.0f - sin_theta_h * sin_theta_h, 0.0f));
	return (GetTransmittanceToTopAtmosphereBoundary(r, mu_s)) *
		smoothstep(-sin_theta_h * sun_angular_radius, sin_theta_h * sun_angular_radius, mu_s - cos_theta_h);
}

[numthreads(8, 8, 1)]
void Transmittance_Kernel(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= TransmittanceTexWidth || id.y >= TransmittanceTexHeight) return;
	// TODO: insert actual code here!
	float3 col = ComputeTransmittanceToTopAtmosphereBoundaryTexture(id.xy + 0.5f);

	TransmittanceTex[id.xy] = float4(col, 1.0f);
}



#pragma kernel SingleScatter_Kernel

void ComputeSingleScatteringIntegrand(float r, float mu, float mu_s, float nu, float d, bool ray_r_mu_intersects_ground, inout float3 rayleigh, inout float3 mie) {
	float r_d = clamp(sqrt(d * d + 2.0f * r * mu * d + r * r), bottom_radius, top_radius);
	float mu_s_d = clamp((r * mu_s + d * nu) / r_d, -1.0f, 1.0f);

	float3 transmittance = GetTransmittance(r, mu, d, ray_r_mu_intersects_ground) * GetTransmissionToSun(r_d, mu_s_d);
	DensityProfileLayer DensProf[2] = { rayleigh_density[0], rayleigh_density[1] };
	rayleigh = transmittance * GetProfileDensity(DensProf, r_d - bottom_radius);
	DensProf[0] = mie_density[0];
	DensProf[1] = mie_density[1];
	mie = transmittance * GetProfileDensity(DensProf, r_d - bottom_radius);
}

float DistanceToNearestAtmosphereBoundary(float r, float mu, bool ray_r_mu_intersects_ground) {
	[branch] if (ray_r_mu_intersects_ground) {
		return DistanceToBottomAtmosphereBoundary(r, mu);
	}
	else {
		return DistanceToTopAtmosphereBoundary(r, mu);
	}
}

void ComputeSingleScattering(float r, float mu, float mu_s, float nu, bool ray_r_mu_intersects_ground, inout float3 rayleigh, inout float3 mie) {
	float dx = DistanceToNearestAtmosphereBoundary(r, mu, ray_r_mu_intersects_ground) / 50.0f;
	float3 rayleigh_sum = float3(0.0f, 0.0f, 0.0f);
	float3 mie_sum = float3(0.0f, 0.0f, 0.0f);
	for (int i = 0; i <= 50; ++i) {
		float d_i = (float)i * dx;
		float3 rayleigh_i;
		float3 mie_i;
		ComputeSingleScatteringIntegrand(r, mu, mu_s, nu, d_i, ray_r_mu_intersects_ground, rayleigh_i, mie_i);
		float weight_i = (i == 0 || i == 50) ? 0.5f : 1.0f;
		rayleigh_sum += rayleigh_i * weight_i;
		mie_sum += mie_i * weight_i;
	}
	rayleigh = rayleigh_sum * dx * solar_irradiance * rayleigh_scattering;
	mie = mie_sum * dx * solar_irradiance * mie_scattering;

}

inline float4 GetScatteringTextureUvwzFromRMuMuSNu(float r, float mu, float mu_s, float nu, bool ray_r_mu_intersects_ground) {
	float rho = sqrt(max(r * r - bottom_radius * bottom_radius, 0.0f));
	float u_r = GetTextureCoordFromUnitRange(rho / H, ScatteringTexRSize);

	float r_mu = r * mu;
	float discriminant = r_mu * r_mu - r * r + bottom_radius * bottom_radius;
	float u_mu;
	if (ray_r_mu_intersects_ground) {
		float d = -r_mu - sqrt(max(discriminant, 0.0f));
		float d_min = r - bottom_radius;
		float d_max = rho;
		u_mu = 0.5f - 0.5f * GetTextureCoordFromUnitRange((d_max == d_min) ? 0.0f : ((d - d_min) / (d_max - d_min)), ScatteringTexMUSize / 2.0f);
	}
	else {
		float d = -r_mu + sqrt(max(discriminant + H * H, 0.0f));
		float d_min = top_radius - r;
		float d_max = rho + H;
		u_mu = 0.5f + 0.5f * GetTextureCoordFromUnitRange((d - d_min) / (d_max - d_min), ScatteringTexMUSize / 2.0f);
	}

	float d = DistanceToTopAtmosphereBoundary(bottom_radius, mu_s);
	float d_min = top_radius - bottom_radius;
	float d_max = H;
	float a = (d - d_min) / (d_max - d_min);
	float A = -2.0 * mu_s_min * bottom_radius / (d_max - d_min);

	float u_mu_s = GetTextureCoordFromUnitRange(max(1.0f - a / A, 0.0f) / (1.0f + a), ScatteringTexMUSSize);

	float u_nu = (nu + 1.0f) / 2.0f;
	return float4(u_nu, u_mu_s, u_mu, u_r);
}


inline void GetRMuMuSNuFromScatteringTextureUvwz(float4 uvwz, inout float r, inout float mu, inout float mu_s, inout float nu, inout bool ray_r_mu_intersects_ground) {
	float rho = H * GetUnitRangeFromTextureCoord(uvwz.w, ScatteringTexRSize);
	r = sqrt(rho * rho + bottom_radius * bottom_radius);




	if (uvwz.z < 0.5f) {
		float d_min = r - bottom_radius;
		float d_max = rho;
		float d = d_min + (d_max - d_min) * GetUnitRangeFromTextureCoord(1.0f - 2.0f * uvwz.z, ScatteringTexMUSize / 2.0f);
		mu = (d == 0.0f) ? -1.0f : clamp(-(rho * rho + d * d) / (2.0f * r * d), -1.0f, 1.0f);
		ray_r_mu_intersects_ground = true;

	}
	else {
		float d_min = top_radius - r;
		float d_max = rho + H;
		float d = d_min + (d_max - d_min) * GetUnitRangeFromTextureCoord(2.0f * uvwz.z - 1.0f, ScatteringTexMUSize / 2.0f);
		mu = (d == 0.0f) ? 1.0f : clamp((H * H - rho * rho - d * d) / (2.0f * r * d), -1.0f, 1.0f);
		ray_r_mu_intersects_ground = false;
	}
	float x_mu_s = GetUnitRangeFromTextureCoord(uvwz.y, ScatteringTexMUSSize);
	float d_min = top_radius - bottom_radius;
	float d_max = H;

	float A = -2.0 * mu_s_min * bottom_radius / (d_max - d_min);
	float a = (A - x_mu_s * A) / (1.0 + x_mu_s * A);
	float d = d_min + min(a, A) * (d_max - d_min);
	mu_s = d == 0.0 ? 1.0f : clamp((H * H - d * d) / (2.0 * bottom_radius * d), -1.0f, 1.0f);

	nu = clamp(uvwz.x * 2.0 - 1.0, -1.0f, 1.0f);
}

static const float4 SCATTERINGTEXTURESIZE = float4(
	ScatteringTexNUSize - 1,
	ScatteringTexMUSSize,
	ScatteringTexMUSize,
	ScatteringTexRSize
	);
inline void GetRMuMuSNuFromScatteringTextureFragCoord(float3 frag_coord, inout float r, inout float mu, inout float mu_s, inout float nu, inout bool ray_r_mu_intersects_ground) {
	float frag_coord_nu = floor(frag_coord.x / (float)ScatteringTexMUSSize);
	float frag_coord_mu_s = fmod(frag_coord.x, (float)ScatteringTexMUSSize);
	float4 uvwz = float4(frag_coord_nu, frag_coord_mu_s, frag_coord.y, frag_coord.z) / SCATTERINGTEXTURESIZE;
	GetRMuMuSNuFromScatteringTextureUvwz(uvwz, r, mu, mu_s, nu, ray_r_mu_intersects_ground);
	nu = clamp(nu, mu * mu_s - sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)), mu * mu_s + sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)));
}

void ComputeSingleScatteringTexture(float3 frag_coord, inout float3 rayleigh, inout float3 mie) {
	float r;
	float mu;
	float mu_s;
	float nu;
	bool ray_r_mu_intersects_ground;
	GetRMuMuSNuFromScatteringTextureFragCoord(frag_coord, r, mu, mu_s, nu, ray_r_mu_intersects_ground);
	ComputeSingleScattering(r, mu, mu_s, nu, ray_r_mu_intersects_ground, rayleigh, mie);

}

float RayleighPhaseFunction(float nu) {
	float k = 3.0 / (16.0 * PI);
	return k * (1.0 + nu * nu);
}

float MiePhaseFunction(float g, float nu) {
	float k = 3.0 / (8.0 * PI) * (1.0 - g * g) / (2.0 + g * g);
	return k * (1.0 + nu * nu) / pow(abs(1.0 + g * g - 2.0 * g * nu), 1.5);
}


float3 GetTransmittanceToSun(float r, float mu_s) {
	float sin_theta_h = bottom_radius / r;
	float cos_theta_h = -sqrt(max(1.0f - sin_theta_h * sin_theta_h, 0.0f));
	return (GetTransmittanceToTopAtmosphereBoundary(r, mu_s)) *
		smoothstep(-sin_theta_h * sun_angular_radius / 1.0f,
			sin_theta_h * sun_angular_radius / 1.0f,
			mu_s - cos_theta_h);
}


static const float4x4 LuminanceFromRadiance = float4x4(1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f);



[numthreads(8, 8, 8)]
void SingleScatter_Kernel(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= ScatteringTexNUSize * ScatteringTexMUSSize || id.y >= ScatteringTexMUSize || id.z > ScatteringTexRSize) return;
	// TODO: insert actual code here!
	float3 rayleigh;
	float3 mie;
	ComputeSingleScatteringTexture(id.xyz + 0.5f, rayleigh, mie);

	RayleighTex[id.xyz] = float4(rayleigh, 1.0f);
	MieTex[id.xyz] = float4(mie, 1.0f);
	rayleigh = mul(LuminanceFromRadiance, float4(rayleigh, 1)).xyz;
	float mie2 = mul(LuminanceFromRadiance, float4(mie, 1)).x;
	ScatteringTex[id.xyz] = float4(rayleigh, mie2);
}


#pragma kernel DirectIrradiance_Kernel

float3 ComputeDirectIrradiance(float r, float mu_s) {

	float alpha_s = sun_angular_radius;
	// Approximate average of the cosine factor mu_s over the visible fraction of
	// the Sun disc.
	float average_cosine_factor =
		mu_s < -alpha_s ? 0.0 : (mu_s > alpha_s ? mu_s :
			(mu_s + alpha_s) * (mu_s + alpha_s) / (4.0 * alpha_s));

	return solar_irradiance *
		(GetTransmittanceToTopAtmosphereBoundary(
			r, mu_s)) * average_cosine_factor;

}

void GetRMuSFromIrradianceTextureUv(float2 uv, inout float r, inout float mu_s) {
	float x_mu_s = GetUnitRangeFromTextureCoord(uv.x, IrradianceTexWidth);
	float x_r = GetUnitRangeFromTextureCoord(uv.y, IrradianceTexHeight);
	r = bottom_radius +
		x_r * (top_radius - bottom_radius);
	mu_s = ClampCosine(2.0 * x_mu_s - 1.0);
}

float3 ComputeDirectIrradianceTexture(
	float2 frag_coord) {
	float r;
	float mu_s;
	GetRMuSFromIrradianceTextureUv(frag_coord / float2(IrradianceTexWidth, IrradianceTexHeight), r, mu_s);
	return ComputeDirectIrradiance(r, mu_s);
}



[numthreads(1, 1, 1)]
void DirectIrradiance_Kernel(uint3 id : SV_DispatchThreadID)
{

	float3 DeltaIrradiance = ComputeDirectIrradianceTexture(id.xy + 0.5f);
	DeltaIrradianceTex[id.xy] = float4(DeltaIrradiance, 0);
	IrradianceTex[id.xy] = 0;
}

#pragma kernel IndirectIrradiance_Kernel
float3 GetScattering2(Texture3D Tex, float r, float mu, float mu_s, float nu, bool ray_r_mu_intersects_ground) {
	float4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(r, mu, mu_s, nu, ray_r_mu_intersects_ground);
	float tex_coord_x = uvwz.x * (float)(ScatteringTexNUSize - 1);
	float tex_x = floor(tex_coord_x);
	float lerp2 = tex_coord_x - tex_x;
	float3 uvw0 = float3((tex_x + uvwz.y) / (float)ScatteringTexNUSize,
		uvwz.z, uvwz.w);
	float3 uvw1 = float3((tex_x + 1.0 + uvwz.y) / (float)ScatteringTexNUSize,
		uvwz.z, uvwz.w);
	return float3(Tex.SampleLevel(linearClampSampler, uvw0, 0).xyz * (1.0 - lerp2) + Tex.SampleLevel(linearClampSampler, uvw1, 0).xyz * lerp2);
}

inline float3 GetScattering(float r, float mu, float mu_s, float nu, bool ray_r_mu_intersects_ground, int scattering_order) {
	[branch]if (scattering_order == 1) {
		const float4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(r, mu, mu_s, nu, ray_r_mu_intersects_ground);
		float tex_coord_x = uvwz.x * (float)(ScatteringTexNUSize - 1);
		float tex_x = floor(tex_coord_x);
		float lerp2 = tex_coord_x - tex_x;
		float3 uvw0 = float3((tex_x + uvwz.y) / (float)ScatteringTexNUSize,
			uvwz.z, uvwz.w);
		float3 uvw1 = float3((tex_x + 1.0 + uvwz.y) / (float)ScatteringTexNUSize,
			uvwz.z, uvwz.w);		

		float3 rayleigh = float3(RayleighTexRead.SampleLevel(linearClampSampler, uvw0, 0).xyz * (1.0 - lerp2) + RayleighTexRead.SampleLevel(linearClampSampler, uvw1, 0).xyz * lerp2);
		float3 mie = float3(MieTexRead.SampleLevel(linearClampSampler, uvw0, 0).xyz * (1.0 - lerp2) + MieTexRead.SampleLevel(linearClampSampler, uvw1, 0).xyz * lerp2);
		return rayleigh * RayleighPhaseFunction(nu) + mie * MiePhaseFunction(0.8f, nu);
	}
	else {
		return GetScattering2(MultipleScatteringTexRead, r, mu, mu_s, nu, ray_r_mu_intersects_ground);
	}
}

float3 ComputeIndirectIrradiance(
	float r, float mu_s, int scattering_order) {

	const int SAMPLE_COUNT = 32;
	const float dphi = 3.14159 / float(SAMPLE_COUNT);
	const float dtheta = 3.14159 / float(SAMPLE_COUNT);

	float3 result = 0.0;
	float3 omega_s = float3(sqrt(1.0 - mu_s * mu_s), 0.0, mu_s);
	for (int j = 0; j < SAMPLE_COUNT / 2; ++j) {
		float theta = (float(j) + 0.5) * dtheta;
		for (int i = 0; i < 2 * SAMPLE_COUNT; ++i) {
			float phi = (float(i) + 0.5) * dphi;
			float3 omega =
				float3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));
			float domega = (dtheta) * (dphi)*sin(theta);

			float nu = dot(omega, omega_s);
			result += GetScattering(r, omega.z, mu_s, nu, false, scattering_order) * omega.z * domega;
		}
	}
	return result;
}


float3 ComputeIndirectIrradianceTexture(
	float2 frag_coord, int scattering_order) {
	float r;
	float mu_s;
	GetRMuSFromIrradianceTextureUv(frag_coord / float2(IrradianceTexWidth, IrradianceTexHeight), r, mu_s);
	return ComputeIndirectIrradiance(r, mu_s, scattering_order);
}


int ScatteringOrder;
[numthreads(1, 1, 1)]
void IndirectIrradiance_Kernel(uint3 id : SV_DispatchThreadID)
{

	float3 DeltaIrradiance = ComputeIndirectIrradianceTexture(
		id.xy + 0.5f, ScatteringOrder);
	DeltaIrradianceTex[id.xy] = float4(DeltaIrradiance, 0);
	IrradianceTex[id.xy] = (float4(mul(LuminanceFromRadiance, float4(DeltaIrradiance, 0)).xyz, 0) + IrradianceTex[id.xy]);
}


#pragma kernel ScatteringDensity_kernel


float2 GetIrradianceTextureUvFromRMuS(float r, float mu_s) {
	float x_r = (r - bottom_radius) /
		(top_radius - bottom_radius);
	float x_mu_s = mu_s * 0.5 + 0.5;
	return float2(GetTextureCoordFromUnitRange(x_mu_s, IrradianceTexWidth),
		GetTextureCoordFromUnitRange(x_r, IrradianceTexHeight));
}

float3 GetIrradiance(float r, float mu_s) {
	float2 uv = GetIrradianceTextureUvFromRMuS(r, mu_s);
	return IrradianceTexRead.SampleLevel(linearClampSampler, uv, 0).xyz;
}


inline float3 ComputeScatteringDensity(
	float r, float mu, float mu_s, float nu, int scattering_order) {

	// Compute unit direction vectors for the zenith, the view direction omega and
	// and the sun direction omega_s, such that the cosine of the view-zenith
	// angle is mu, the cosine of the sun-zenith angle is mu_s, and the cosine of
	// the view-sun angle is nu. The goal is to simplify computations below.
	float3 zenith_direction = float3(0.0, 0.0, 1.0);
	float3 omega = float3(sqrt(1.0 - mu * mu), 0.0, mu);
	float sun_dir_x = omega.x == 0.0 ? 0.0 : (nu - mu * mu_s) / omega.x;
	float sun_dir_y = sqrt(max(1.0 - sun_dir_x * sun_dir_x - mu_s * mu_s, 0.0));
	float3 omega_s = float3(sun_dir_x, sun_dir_y, mu_s);

	static const float dphi = 3.14159f / 16.0f;//(SAMPLE_COUNT);
	static const float dtheta = 3.14159f / 16.0f;//(SAMPLE_COUNT);
	float3 rayleigh_mie = 0.0;// RadianceDensitySpectrum(0.0 * watt_per_cubic_meter_per_sr_per_nm);

	// Nested loops for the integral over all the incident directions omega_i.
	for (int l = 0; l < 16; ++l) {
		float theta = (float(l) + 0.5) * dtheta;
		float cos_theta = cos(theta);
		float sin_theta = sin(theta);
		bool ray_r_theta_intersects_ground =
			RayIntersectsGround(r, cos_theta);

		// The distance and transmittance to the ground only depend on theta, so we
		// can compute them in the outer loop for efficiency.
		float distance_to_ground = 0.0f;
		float3 transmittance_to_ground = float3(0.0, 0.0, 0.0);
		float3 ground_albedo = float3(0.1, 0.1, 0.1);
		if (ray_r_theta_intersects_ground) {
			distance_to_ground =
				DistanceToBottomAtmosphereBoundary(r, cos_theta);
			transmittance_to_ground =
				GetTransmittance(r, cos_theta,
					distance_to_ground, true /* ray_intersects_ground */);
			ground_albedo = ground_albedo;
		}

		for (int sample = 0; sample < 32; ++sample) {
			float phi = (float(sample) + 0.5) * dphi;
			float3 omega_i =
				float3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);
			float domega_i = (dtheta) * (dphi)*sin(theta);

			// The radiance L_i arriving from direction omega_i after n-1 bounces is
			// the sum of a term given by the precomputed scattering texture for the
			// (n-1)-th order:
			float nu1 = dot(omega_s, omega_i);
			float3 incident_radiance = GetScattering(r, omega_i.z, mu_s, nu1,
				ray_r_theta_intersects_ground, scattering_order - 1);

			// and of the contribution from the light paths with n-1 bounces and whose
			// last bounce is on the ground. This contribution is the product of the
			// transmittance to the ground, the ground albedo, the ground BRDF, and
			// the irradiance received on the ground after n-2 bounces.
			float3 ground_normal =
				normalize(zenith_direction * r + omega_i * distance_to_ground);
			float3 ground_irradiance = GetIrradiance(
				bottom_radius,
				dot(ground_normal, omega_s));
			incident_radiance += transmittance_to_ground *
				ground_albedo * (1.0 / (PI)) * ground_irradiance;

			// The radiance finally scattered from direction omega_i towards direction
			// -omega is the product of the incident radiance, the scattering
			// coefficient, and the phase function for directions omega and omega_i
			// (all this summed over all particle types, i.e. Rayleigh and Mie).
			float nu2 = dot(omega, omega_i);
			DensityProfileLayer DensProf[2] = { rayleigh_density[0], rayleigh_density[1] };
			float rayleigh_density = GetProfileDensity(
				DensProf, r - bottom_radius);
			DensProf[0] = mie_density[0];
			DensProf[1] = mie_density[1];
			float mie_density = GetProfileDensity(
				DensProf, r - bottom_radius);
			rayleigh_mie += incident_radiance * (
				rayleigh_scattering * rayleigh_density *
				RayleighPhaseFunction(nu2) +
				mie_scattering * mie_density *
				MiePhaseFunction(0.8f, nu2)) *
				domega_i;
		}
	}
	return rayleigh_mie;
}

inline float3 ComputeScatteringDensityTexture(
	float3 frag_coord, int scattering_order) {
	float r;
	float mu;
	float mu_s;
	float nu;
	bool ray_r_mu_intersects_ground;
	GetRMuMuSNuFromScatteringTextureFragCoord(frag_coord,
		r, mu, mu_s, nu, ray_r_mu_intersects_ground);
	return ComputeScatteringDensity(r, mu, mu_s, nu,
		scattering_order);
}


[numthreads(8, 8, 8)]
void ScatteringDensity_kernel(uint3 id : SV_DispatchThreadID)
{
	float3 ScatteringDensity = ComputeScatteringDensityTexture(float3(id.xy + 0.5f, id.z + 0.5f), ScatteringOrder);
	ScatteringDensityTex[id.xyz] = float4(ScatteringDensity, 1);

}


#pragma kernel MultiScatter_kernel


float raySphereIntersectNearest(float3 r0, float3 rd, float3 s0, float sR)
{
	float a = dot(rd, rd);
	float3 s0_r0 = r0 - s0;
	float b = 2.0 * dot(rd, s0_r0);
	float c = dot(s0_r0, s0_r0) - (sR * sR);
	float delta = b * b - 4.0 * a * c;
	if (delta < 0.0 || a == 0.0)
	{
		return -1.0;
	}
	float sol0 = (-b - sqrt(delta)) / (2.0 * a);
	float sol1 = (-b + sqrt(delta)) / (2.0 * a);
	if (sol0 < 0.0 && sol1 < 0.0)
	{
		return -1.0;
	}
	if (sol0 < 0.0)
	{
		return max(0.0, sol1);
	}
	else if (sol1 < 0.0)
	{
		return max(0.0, sol0);
	}
	return max(0.0, min(sol0, sol1));
}


RWTexture3D<float4> DeltaMultipleScattering;

inline float3 ComputeMultipleScattering(
	float r, float mu, float mu_s, float nu,
	bool ray_r_mu_intersects_ground) {

	// Number of intervals for the numerical integration.
	// The integration step, i.e. the length of each integration interval.
	float dx =
		DistanceToNearestAtmosphereBoundary(r, mu, ray_r_mu_intersects_ground) / 50.0f;
	// Integration loop.
	float3 rayleigh_mie_sum = 0;
	for (int i = 0; i <= 50; ++i) {
		float d_i = float(i) * dx;

		// The r, mu and mu_s parameters at the current integration thispoint (see the
		// single scattering section for a detailed explanation).
		float r_i =
			ClampRadius(sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r));
		float mu_i = ClampCosine((r * mu + d_i) / r_i);
		float mu_s_i = ClampCosine((r * mu_s + d_i * nu) / r_i);

		// The Rayleigh and Mie multiple scattering at the current sample thispoint.
		float3 rayleigh_mie_i =
			GetScattering2(ScatteringDensityTexRead,
				r_i, mu_i, mu_s_i, nu,
				ray_r_mu_intersects_ground) *
			GetTransmittance(
				r, mu, d_i,
				ray_r_mu_intersects_ground) *
			dx;
		// Sample weight (from the trapezoidal rule).
		float weight_i = (i == 0 || i == 50) ? 0.5 : 1.0;
		rayleigh_mie_sum += rayleigh_mie_i * weight_i;
	}
	return rayleigh_mie_sum;
}

inline float3 ComputeMultipleScatteringTexture(
	float3 frag_coord, inout float nu) {
	float r;
	float mu;
	float mu_s;
	bool ray_r_mu_intersects_ground;
	GetRMuMuSNuFromScatteringTextureFragCoord(frag_coord,
		r, mu, mu_s, nu, ray_r_mu_intersects_ground);
	return ComputeMultipleScattering(r, mu, mu_s, nu,
		ray_r_mu_intersects_ground);
}

int Layer;
RWTexture3D<float4> MultiScatterTex;
[numthreads(8, 8, 8)]
void MultiScatter_kernel(uint3 id : SV_DispatchThreadID)
{
	float nu = 0.0f;
	float3 MultipleScatterDelta = ComputeMultipleScatteringTexture(float3(id.xy + 0.5f, id.z + 0.5f), nu);
	DeltaMultipleScattering[id.xyz] = float4(MultipleScatterDelta, 1);
	MultiScatterTex[id.xyz] = (MultiScatterTex[id.xyz] + float4(mul(LuminanceFromRadiance, float4(MultipleScatterDelta.xyz / RayleighPhaseFunction(nu), 1)).xyz, 0.0f));

}



#pragma kernel CloudShapeKernel


float inverseLerp(const float x, const float y, const float a) {
  return (a - x) / (y - x);
}

float2 inverseLerp(const float2 x, const float2 y, const float2 a) {
  return (a - x) / (y - x);
}

float3 inverseLerp(const float3 x, const float3 y, const float3 a) {
  return (a - x) / (y - x);
}

float4 inverseLerp(const float4 x, const float4 y, const float4 a) {
  return (a - x) / (y - x);
}

float remap(const float x, const float min1, const float max1, const float min2, const float max2) {
  return min2 + (x - min1) / (max1 - min1) * (max2 - min2);
}

float2 remap(const float2 x, const float2 min1, const float2 max1, const float2 min2, const float2 max2) {
  return min2 + (x - min1) / (max1 - min1) * (max2 - min2);
}

float2 remap(const float2 x, const float min1, const float max1, const float min2, const float max2) {
  return min2 + (x - min1) / (max1 - min1) * (max2 - min2);
}

float3 remap(const float3 x, const float3 min1, const float3 max1, const float3 min2, const float3 max2) {
  return min2 + (x - min1) / (max1 - min1) * (max2 - min2);
}

float3 remap(const float3 x, const float min1, const float max1, const float min2, const float max2) {
  return min2 + (x - min1) / (max1 - min1) * (max2 - min2);
}

float4 remap(const float4 x, const float4 min1, const float4 max1, const float4 min2, const float4 max2) {
  return min2 + (x - min1) / (max1 - min1) * (max2 - min2);
}

float4 remap(const float4 x, const float min1, const float max1, const float min2, const float max2) {
  return min2 + (x - min1) / (max1 - min1) * (max2 - min2);
}



RWTexture3D<float4> CloudShapeTex;


float4 mod289(const float4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 permute(const float4 v) {
  return mod289((v * 34.0 + 1.0) * v);
}

float4 taylorInvSqrt(const float4 r) {
  return 1.79284291400159 - 0.85373472095314 * r;
}

float4 fade(const float4 v) {
  return v * v * v * (v * (v * 6.0 - 15.0) + 10.0);
}

// Classic Perlin noise, periodic version
float perlin(const float4 position, const float4 rep) {
  float4 Pi0 = fmod(floor(position), rep); // Integer part modulo rep
  float4 Pi1 = fmod(Pi0 + 1.0, rep); // Integer part + 1 fmod rep
  float4 Pf0 = frac(position); // Fractional part for interpolation
  float4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0
  float4 ix = float4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  float4 iy = float4(Pi0.y, Pi0.y, Pi1.y, Pi1.y);
  float4 iz0 = Pi0.z;
  float4 iz1 = Pi1.z;
  float4 iw0 = Pi0.w;
  float4 iw1 = Pi1.w;

  float4 ixy = permute(permute(ix) + iy);
  float4 ixy0 = permute(ixy + iz0);
  float4 ixy1 = permute(ixy + iz1);
  float4 ixy00 = permute(ixy0 + iw0);
  float4 ixy01 = permute(ixy0 + iw1);
  float4 ixy10 = permute(ixy1 + iw0);
  float4 ixy11 = permute(ixy1 + iw1);

  float4 gx00 = ixy00 / 7.0;
  float4 gy00 = floor(gx00) / 7.0;
  float4 gz00 = floor(gy00) / 6.0;
  gx00 = frac(gx00) - 0.5;
  gy00 = frac(gy00) - 0.5;
  gz00 = frac(gz00) - 0.5;
  float4 gw00 = 0.75 - abs(gx00) - abs(gy00) - abs(gz00);
  float4 sw00 = step(gw00, 0);
  gx00 -= sw00 * (step(0.0, gx00) - 0.5);
  gy00 -= sw00 * (step(0.0, gy00) - 0.5);

  float4 gx01 = ixy01 / 7.0;
  float4 gy01 = floor(gx01) / 7.0;
  float4 gz01 = floor(gy01) / 6.0;
  gx01 = frac(gx01) - 0.5;
  gy01 = frac(gy01) - 0.5;
  gz01 = frac(gz01) - 0.5;
  float4 gw01 = 0.75 - abs(gx01) - abs(gy01) - abs(gz01);
  float4 sw01 = step(gw01, 0.0);
  gx01 -= sw01 * (step(0.0, gx01) - 0.5);
  gy01 -= sw01 * (step(0.0, gy01) - 0.5);

  float4 gx10 = ixy10 / 7.0;
  float4 gy10 = floor(gx10) / 7.0;
  float4 gz10 = floor(gy10) / 6.0;
  gx10 = frac(gx10) - 0.5;
  gy10 = frac(gy10) - 0.5;
  gz10 = frac(gz10) - 0.5;
  float4 gw10 = 0.75 - abs(gx10) - abs(gy10) - abs(gz10);
  float4 sw10 = step(gw10, 0.0);
  gx10 -= sw10 * (step(0.0, gx10) - 0.5);
  gy10 -= sw10 * (step(0.0, gy10) - 0.5);

  float4 gx11 = ixy11 / 7.0;
  float4 gy11 = floor(gx11) / 7.0;
  float4 gz11 = floor(gy11) / 6.0;
  gx11 = frac(gx11) - 0.5;
  gy11 = frac(gy11) - 0.5;
  gz11 = frac(gz11) - 0.5;
  float4 gw11 = 0.75 - abs(gx11) - abs(gy11) - abs(gz11);
  float4 sw11 = step(gw11, 0.0);
  gx11 -= sw11 * (step(0.0, gx11) - 0.5);
  gy11 -= sw11 * (step(0.0, gy11) - 0.5);

  float4 g0000 = float4(gx00.x, gy00.x, gz00.x, gw00.x);
  float4 g1000 = float4(gx00.y, gy00.y, gz00.y, gw00.y);
  float4 g0100 = float4(gx00.z, gy00.z, gz00.z, gw00.z);
  float4 g1100 = float4(gx00.w, gy00.w, gz00.w, gw00.w);
  float4 g0010 = float4(gx10.x, gy10.x, gz10.x, gw10.x);
  float4 g1010 = float4(gx10.y, gy10.y, gz10.y, gw10.y);
  float4 g0110 = float4(gx10.z, gy10.z, gz10.z, gw10.z);
  float4 g1110 = float4(gx10.w, gy10.w, gz10.w, gw10.w);
  float4 g0001 = float4(gx01.x, gy01.x, gz01.x, gw01.x);
  float4 g1001 = float4(gx01.y, gy01.y, gz01.y, gw01.y);
  float4 g0101 = float4(gx01.z, gy01.z, gz01.z, gw01.z);
  float4 g1101 = float4(gx01.w, gy01.w, gz01.w, gw01.w);
  float4 g0011 = float4(gx11.x, gy11.x, gz11.x, gw11.x);
  float4 g1011 = float4(gx11.y, gy11.y, gz11.y, gw11.y);
  float4 g0111 = float4(gx11.z, gy11.z, gz11.z, gw11.z);
  float4 g1111 = float4(gx11.w, gy11.w, gz11.w, gw11.w);

  float4 norm00 = taylorInvSqrt(
    float4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100))
  );
  g0000 *= norm00.x;
  g0100 *= norm00.y;
  g1000 *= norm00.z;
  g1100 *= norm00.w;

  float4 norm01 = taylorInvSqrt(
    float4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101))
  );
  g0001 *= norm01.x;
  g0101 *= norm01.y;
  g1001 *= norm01.z;
  g1101 *= norm01.w;

  float4 norm10 = taylorInvSqrt(
    float4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110))
  );
  g0010 *= norm10.x;
  g0110 *= norm10.y;
  g1010 *= norm10.z;
  g1110 *= norm10.w;

  float4 norm11 = taylorInvSqrt(
    float4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111))
  );
  g0011 *= norm11.x;
  g0111 *= norm11.y;
  g1011 *= norm11.z;
  g1111 *= norm11.w;

  float n0000 = dot(g0000, Pf0);
  float n1000 = dot(g1000, float4(Pf1.x, Pf0.y, Pf0.z, Pf0.w));
  float n0100 = dot(g0100, float4(Pf0.x, Pf1.y, Pf0.z, Pf0.w));
  float n1100 = dot(g1100, float4(Pf1.x, Pf1.y, Pf0.z, Pf0.w));
  float n0010 = dot(g0010, float4(Pf0.x, Pf0.y, Pf1.z, Pf0.w));
  float n1010 = dot(g1010, float4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));
  float n0110 = dot(g0110, float4(Pf0.x, Pf1.y, Pf1.z, Pf0.w));
  float n1110 = dot(g1110, float4(Pf1.x, Pf1.y, Pf1.z, Pf0.w));
  float n0001 = dot(g0001, float4(Pf0.x, Pf0.y, Pf0.z, Pf1.w));
  float n1001 = dot(g1001, float4(Pf1.x, Pf0.y, Pf0.z, Pf1.w));
  float n0101 = dot(g0101, float4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));
  float n1101 = dot(g1101, float4(Pf1.x, Pf1.y, Pf0.z, Pf1.w));
  float n0011 = dot(g0011, float4(Pf0.x, Pf0.y, Pf1.z, Pf1.w));
  float n1011 = dot(g1011, float4(Pf1.x, Pf0.y, Pf1.z, Pf1.w));
  float n0111 = dot(g0111, float4(Pf0.x, Pf1.y, Pf1.z, Pf1.w));
  float n1111 = dot(g1111, Pf1);

  float4 fade_xyzw = fade(Pf0);
  float4 n_0w = lerp(float4(n0000, n1000, n0100, n1100), float4(n0001, n1001, n0101, n1101), fade_xyzw.w);
  float4 n_1w = lerp(float4(n0010, n1010, n0110, n1110), float4(n0011, n1011, n0111, n1111), fade_xyzw.w);
  float4 n_zw = lerp(n_0w, n_1w, fade_xyzw.z);
  float2 n_yzw = lerp(n_zw.xy, n_zw.zw, fade_xyzw.y);
  float n_xyzw = lerp(n_yzw.x, n_yzw.y, fade_xyzw.x);
  return 2.2 * n_xyzw;
}



float hash(const float n) {
  return frac(sin(n + 1.951) * 43758.5453);
}

float noise(const float3 x) {
  float3 p = floor(x);
  float3 f = frac(x);

  f = f * f * (3.0 - 2.0 * f);
  float n = p.x + p.y * 57.0 + 113.0 * p.z;
  return lerp(
    lerp(lerp(hash(n + 0.0), hash(n + 1.0), f.x), lerp(hash(n + 57.0), hash(n + 58.0), f.x), f.y),
    lerp(
      lerp(hash(n + 113.0), hash(n + 114.0), f.x),
      lerp(hash(n + 170.0), hash(n + 171.0), f.x),
      f.y
    ),
    f.z
  );
}

float getWorleyNoise(const float3 p, const float cellCount) {
  float3 cell = p * cellCount;
  float d = 1.0e10;
  for (int x = -1; x <= 1; ++x) {
    for (int y = -1; y <= 1; ++y) {
      for (int z = -1; z <= 1; ++z) {
        float3 tp = floor(cell) + float3(x, y, z);
        tp = cell - tp - noise(fmod(tp, cellCount / 1.0));
        d = min(d, dot(tp, tp));
      }
    }
  }
  return clamp(d, 0.0, 1.0);
}

float getPerlinNoise(const float3 thispoint, const float frequency, const int octaveCount) {
  // Noise frequency factor between octave, forced to 2.
  const float octaveFrequencyFactor = 2.0;

  // Compute the sum for each octave.
  float sum = 0.0;
  float roughness = 0.5;
  float weightSum = 0.0;
  float weight = 1.0;
  float nextFrequency = frequency;
  for (int i = 0; i < octaveCount; ++i) {
    float4 p = float4(thispoint.x, thispoint.y, thispoint.z, 0.0) * nextFrequency;
    float value = perlin(p, nextFrequency);
    sum += value * weight;
    weightSum += weight;
    weight *= roughness;
    nextFrequency *= octaveFrequencyFactor;
  }

  float noise = sum / weightSum;
  return clamp(noise, 0.0, 1.0);
}



float getPerlinWorley(const float3 thispoint) {
  int octaveCount = 3;
  float frequency = 8.0;
  float perlin = getPerlinNoise(thispoint, frequency, octaveCount);

  float cellCount = 4.0;
  float3 noise = float3(
    1.0 - getWorleyNoise(thispoint, cellCount * 2.0),
    1.0 - getWorleyNoise(thispoint, cellCount * 8.0),
    1.0 - getWorleyNoise(thispoint, cellCount * 14.0)
  );
  float fbm = dot(noise, float3(0.625, 0.25, 0.125));
  return remap(perlin, 0.0, 1.0, fbm, 1.0);
}

float getWorleyFbm(const float3 thispoint) {
  float cellCount = 4.0;
  float4 noise = float4(
    1.0 - getWorleyNoise(thispoint, cellCount * 2.0),
    1.0 - getWorleyNoise(thispoint, cellCount * 4.0),
    1.0 - getWorleyNoise(thispoint, cellCount * 8.0),
    1.0 - getWorleyNoise(thispoint, cellCount * 16.0)
  );
  float3 fbm = float3(
    dot(noise.xyz, float3(0.625, 0.25, 0.125)),
    dot(noise.yzw, float3(0.625, 0.25, 0.125)),
    dot(noise.zw, float2(0.75, 0.25))
  );
  return dot(fbm, float3(0.625, 0.25, 0.125));
}

[numthreads(1, 1, 1)]
void CloudShapeKernel(uint3 id : SV_DispatchThreadID)
{
	float3 thispoint = float3(id.x, id.z, id.y) / 128.0f;
	float perlinWorley = getPerlinWorley(thispoint);
	float worleyFbm = getWorleyFbm(thispoint);
	CloudShapeTex[id.xzy] = remap(perlinWorley, worleyFbm - 1.0, 1.0, 0.0, 1.0);


}

#pragma kernel CloudShapeDetailKernel

RWTexture3D<float4> CloudShapeDetailTex;

[numthreads(1, 1, 1)]
void CloudShapeDetailKernel(uint3 id : SV_DispatchThreadID)
{
	float3 thispoint = float3(id.x, id.z, id.y) / 32.0f;
	float cellCount = 2.0;
	float4 noise = float4(
	1.0 - getWorleyNoise(thispoint, cellCount * 1.0),
	1.0 - getWorleyNoise(thispoint, cellCount * 2.0),
	1.0 - getWorleyNoise(thispoint, cellCount * 4.0),
	1.0 - getWorleyNoise(thispoint, cellCount * 8.0)
	);
	float3 fbm = float3(
	dot(noise.xyz, float3(0.625, 0.25, 0.125)),
	dot(noise.yzw, float3(0.625, 0.25, 0.125)),
	dot(noise.zw, float2(0.75, 0.25))
	);
	CloudShapeDetailTex[id.xzy] = dot(fbm, float3(0.625, 0.25, 0.125));


}


#pragma kernel WeatherKernel

RWTexture2D<float4> WeatherTex;

[numthreads(16, 16, 1)]
void WeatherKernel(uint3 id : SV_DispatchThreadID)
{
	float3 thispoint = float3(id.x, 1028, id.y) / 512.0f;
	float cellCount = 2.0;
	float4 noise =
	float4(
	1.0f - getPerlinNoise(thispoint, cellCount * 1.0, 8),
	1.0f - getPerlinNoise(thispoint, cellCount * 2.0, 8),
	1.0f - getPerlinNoise(thispoint, cellCount * 4.0, 8),
	1.0f - getPerlinNoise(thispoint, cellCount * 8.0, 8)
	);
	float3 fbm = float3(
	dot(noise.xyz, float3(0.625, 0.25, 0.125)),
	dot(noise.yzw, float3(0.625, 0.25, 0.125)),
	dot(noise.zw, float2(0.75, 0.25))
	);
	WeatherTex[id.xy] = float4(clamp((1.0f - abs(fbm)) * 2.0f,0,1), 1);//noise;//dot(fbm, float3(0.625, 0.25, 0.125));


}

