


#pragma kernel RefitKernel

uint octahedral_32(float3 nor) {
    float2 Signs = (nor.xy>=0.0) ? 1.0 : -1.0;
    nor.xy /= ( nor.x * Signs.x + nor.y * Signs.y + abs( nor.z ) );
    nor.xy  = (nor.z >= 0.0) ? nor.xy : (1.0-(nor.yx * Signs.yx)) * Signs.xy;
    uint2 d = uint2(round(32767.5 + nor.xy*32767.5));  
    return d.x|(d.y<<16u);
}

float3 i_octahedral_32( uint data ) {
    uint2 iv = uint2( data, data>>16u ) & 65535u; 
    float2 v = float2(iv)/32767.5f - 1.0f;
    float3 nor = float3(v, 1.0f - abs(v.x) - abs(v.y)); // Rune Stubbe's version,
    float t = max(-nor.z,0.0);                     // much faster than original
    nor.x += (nor.x>0.0)?-t:t;                     // implementation of this
    nor.y += (nor.y>0.0)?-t:t;                     // technique
    return normalize( nor );
}

struct LightBVHData {
    float3 BBMax;
    float3 BBMin;
    uint w;
    float phi;
    uint cosTheta_oe;
    int left;
};

RWStructuredBuffer<LightBVHData> LightNodes;
StructuredBuffer<int> WorkingSet;
int SetCount;
int ObjectOffset;


float AngleBetween(float3 v1, float3 v2) {
    if(dot(v1, v2) < 0) return 3.14159f - 2.0f * asin(length(v1 + v2) / 2.0f);
    else return 2.0f * asin(length(v2 - v1) / 2.0f);
}


float4x4 Rotate(float sinTheta, float cosTheta, float3 axis) {
    float3 a = normalize(axis);
    float4x4 m;
    m[0][0] = a.x * a.x + (1 - a.x * a.x) * cosTheta;
    m[0][1] = a.x * a.y * (1 - cosTheta) - a.z * sinTheta;
    m[0][2] = a.x * a.z * (1 - cosTheta) + a.y * sinTheta;
    m[0][3] = 0;

    m[1][0] = a.x * a.y * (1 - cosTheta) + a.z * sinTheta;
    m[1][1] = a.y * a.y + (1 - a.y * a.y) * cosTheta;
    m[1][2] = a.y * a.z * (1 - cosTheta) - a.x * sinTheta;
    m[1][3] = 0;

    m[2][0] = a.x * a.z * (1 - cosTheta) - a.y * sinTheta;
    m[2][1] = a.y * a.z * (1 - cosTheta) + a.x * sinTheta;
    m[2][2] = a.z * a.z + (1 - a.z * a.z) * cosTheta;
    m[2][3] = 0;

    m[3][0] = 0;
    m[3][1] = 0;
    m[3][2] = 0;
    m[3][3] = 1;

return mul(m, transpose(m));
}

float4x4 Rotate(float Theta, float3 axis) {
    return Rotate(sin(Theta), cos(Theta), axis);
}
float GetCosThetaO(uint cosTheta) {
    return (2.0f * ((float)(cosTheta & 0x0000FFFF) / 32767.0f) - 1.0f);
}
float GetCosThetaE(uint cosTheta) {
    return (2.0f * ((float)(cosTheta >> 16) / 32767.0f) - 1.0f);
}
uint CompCosTheta(float cosTheta_o, float cosTheta_e) {
    return (uint)floor(32767.0f * ((cosTheta_o + 1.0f) / 2.0f)) | ((uint)floor(32767.0f * ((cosTheta_e + 1.0f) / 2.0f)) << 16);
}

inline float4 DoCone(float4 A, float4 B) {
    if(all(A.xyz == 0)) return B;
    if(all(B.xyz == 0)) return A;
    
    float theta_a = acos(A.w);
    float theta_b = acos(B.w);
    float theta_d = AngleBetween(A.xyz, B.xyz);
    if(min(theta_d + theta_b, 3.14159f) <= theta_a) return A;
    if(min(theta_d + theta_a, 3.14159f) <= theta_b) return B;

    float theta_o = (theta_a + theta_d + theta_b) / 2.0f;
    if(theta_o >= 3.14159f) return float4(0,0,0,-1);

    float theta_r = theta_o - theta_a;
    float3 wr = cross(A.xyz, B.xyz);
    if(dot(wr, wr) == 0) return float4(0,0,0,-1);
    float3 w = mul(Rotate(theta_r, wr), float4(A.xyz,0)).xyz;
    return float4(w, cos(theta_o));
}


inline LightBVHData Union(const LightBVHData A, const LightBVHData B, int Left) {
    float4 Cone = DoCone(float4(i_octahedral_32(A.w), GetCosThetaO(A.cosTheta_oe)), float4(i_octahedral_32(B.w), GetCosThetaO(B.cosTheta_oe)));
    float cosTheta_o = Cone.w;
    float cosTheta_e = min(GetCosThetaE(A.cosTheta_oe), GetCosThetaE(B.cosTheta_oe));
    LightBVHData Dat = {max(A.BBMax, B.BBMax), min(A.BBMin, B.BBMin), octahedral_32(Cone.xyz), A.phi + B.phi, CompCosTheta(cosTheta_o, cosTheta_e), Left};
    return Dat;
}

struct Transfer {
    float4x4 Transf2;
    int SolidOffset;
};

StructuredBuffer<Transfer> Transfers;

float3 transform_position(float4x4 mat, float3 position)
{
    return float3(
        mat[0][0] * position.x + mat[0][1] * position.y + mat[0][2] * position.z + mat[0][3],
        mat[1][0] * position.x + mat[1][1] * position.y + mat[1][2] * position.z + mat[1][3],
        mat[2][0] * position.x + mat[2][1] * position.y + mat[2][2] * position.z + mat[2][3]);
}
float3 transform_direction(float4x4 mat, float3 direction)
{
    return float3(
        abs(mat[0][0]) * direction.x + abs(mat[0][1]) * direction.y + abs(mat[0][2]) * direction.z,
        abs(mat[1][0]) * direction.x + abs(mat[1][1]) * direction.y + abs(mat[1][2]) * direction.z,
        abs(mat[2][0]) * direction.x + abs(mat[2][1]) * direction.y + abs(mat[2][2]) * direction.z
    );
}

[numthreads(256,1,1)]
void RefitKernel (uint3 id : SV_DispatchThreadID)
{
    if(id.x > (uint)SetCount) return;
    const int Index = WorkingSet[id.x];
    LightBVHData Node = LightNodes[Index];
    if(Node.left < 0) {
        Transfer Transf = Transfers[-(Node.left+1)];
        float3 center = transform_position(Transf.Transf2, (LightNodes[Transf.SolidOffset].BBMax + LightNodes[Transf.SolidOffset].BBMin) / 2.0f);
        float3 extent = transform_direction(Transf.Transf2, (LightNodes[Transf.SolidOffset].BBMax - LightNodes[Transf.SolidOffset].BBMin) / 2.0f);
        LightNodes[Index].BBMax = center + extent;
        LightNodes[Index].BBMin = center - extent;
        LightNodes[Index].w = octahedral_32(transform_direction(Transf.Transf2, i_octahedral_32(LightNodes[Transf.SolidOffset].w)));
        LightNodes[Index].phi = max(LightNodes[Transf.SolidOffset].phi,0.000000f);
        LightNodes[Index].cosTheta_oe = LightNodes[Transf.SolidOffset].cosTheta_oe;
        return;
    }
    LightBVHData LeftNode = LightNodes[Node.left];

    LightNodes[Index] = Union(LeftNode, LightNodes[Node.left + 1], Node.left);

}



#pragma kernel LightRefitKernel

struct LightTriData {
    float3 pos0;
    float3 posedge1;
    float3 posedge2;
    uint TriTarget;
    float SourceEnergy;
};

StructuredBuffer<LightTriData> LightTriangles;
int LightTriBuffOffset;
int TotalNodeOffset;

inline float AreaOfTriangle(float3 pt1, float3 pt2, float3 pt3) {
    float a = distance(pt1, pt2);
    float b = distance(pt2, pt3);
    float c = distance(pt3, pt1);
    float s = (a + b + c) / 2.0f;
    return sqrt(s * (s - a) * (s - b) * (s - c));
}
float4x4 ToWorld;

[numthreads(256,1,1)]
void LightRefitKernel (uint3 id : SV_DispatchThreadID)
{
    if(id.x > (uint)SetCount) return;
    const int Index = WorkingSet[id.x] + TotalNodeOffset;
    LightBVHData Node = LightNodes[Index];
    if(Node.left < 0) {
        LightTriData LightTri = LightTriangles[-(Node.left+1) + LightTriBuffOffset];
        float3 BBMax = max(max(LightTri.pos0, LightTri.pos0 + LightTri.posedge1), LightTri.pos0 + LightTri.posedge2);
        float3 BBMin = min(min(LightTri.pos0, LightTri.pos0 + LightTri.posedge1), LightTri.pos0 + LightTri.posedge2);
        [unroll]for(int i = 0; i < 3; i++) {
            if(abs(BBMax[i] - BBMin[i]) < 0.0001f) {
                BBMax[i] += 0.0001f;
                BBMin[i] -= 0.0001f;
            }
        }
        LightNodes[Index].BBMax = BBMax;
        LightNodes[Index].BBMin = BBMin;
        LightNodes[Index].w = octahedral_32(-normalize(cross(normalize(LightTri.posedge1), normalize(LightTri.posedge2))));
        LightNodes[Index].phi = max(LightTri.SourceEnergy * AreaOfTriangle(mul(ToWorld, float4(LightTri.pos0,1)), mul(ToWorld, float4(LightTri.pos0 + LightTri.posedge1,1)), mul(ToWorld, float4(LightTri.pos0 + LightTri.posedge2,1))),0.00000001f);   
        // LightNodes[Index].phi = max(AreaOfTriangle(LightTri.pos0, LightTri.pos0 + LightTri.posedge1, LightTri.pos0 + LightTri.posedge2),0.00000001f);   
        return;
    }
    LightBVHData LeftNode = LightNodes[Node.left + TotalNodeOffset];

    LightNodes[Index] = Union(LeftNode, LightNodes[Node.left + 1 + TotalNodeOffset], Node.left);

}
